plugins {
    id 'fabric-loom' version '1.6-SNAPSHOT'
    //id 'maven-publish'
}

version = project.version
loader_version = project.loader_version
group = project.maven_group

base {
    archivesName = project.mod_id
}

//version = project.mod_version
//group = project.maven_group
//
//base {
//    archivesName = project.archives_base_name
//}

repositories {
    mavenLocal()
    maven {
        name = 'BlameJared Maven (CrT / Bookshelf)'
        url = 'https://maven.blamejared.com'
    }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
}

loom {
    mods {
        "haxutils" {
            sourceSet sourceSets.main
        }
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()//"net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    implementation "io.github.spair:imgui-java-binding:$imgui_version"
    implementation("io.github.spair:imgui-java-lwjgl3:$imgui_version") {
        exclude group: 'org.lwjgl'
        exclude group: 'org.lwjgl.lwjgl'
    }

    modRuntimeOnly "maven.modrinth:modmenu:7.2.2"
}

//processResources {
//    inputs.property "version", project.version
//    inputs.property "minecraft_version", project.minecraft_version
//    inputs.property "loader_version", project.loader_version
//    filteringCharset "UTF-8"
//
//    filesMatching("fabric.mod.json") {
//        expand "version": project.version,
//                "minecraft_version": project.minecraft_version,
//                "loader_version": project.loader_version
//    }
//}

//def targetJavaVersion = 17
//tasks.withType(JavaCompile).configureEach {
//    // ensure that the encoding is set to UTF-8, no matter what the system default is
//    // this fixes some edge cases with special characters not displaying correctly
//    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
//    // If Javadoc is generated, this must be specified in that task too.
//    it.options.encoding = "UTF-8"
//    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
//        it.options.release.set(targetJavaVersion)
//    }
//}

//java {
//    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
//    if (JavaVersion.current() < javaVersion) {
//        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
//    }
//    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
//    // if it is present.
//    // If you remove this line, sources will not be generated.
//    withSourcesJar()
//}

//jar {
//    from("LICENSE") {
//        rename { "${it}_${project.archivesBaseName}"}
//    }
//}

processResources {
    inputs.property "version", project.version
    inputs.property "loader_version", loader_version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
        expand "loader_version": loader_version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}" }
    }
}